{"/HTTP":{"title":"HTTP","data":{"":"","request#Request":"Request Line: Method, Path, HTTP Version\nHeaders\nMessage Body","response#Response":"Status Line: HTTP Version, Status Code, Status Text\nHeaders\nMessage Body"}},"/docker/mysql":{"title":"도커로 MySQL 설치하기","data":{"":"","도커-mysql-이미지-다운로드#도커 MySQL 이미지 다운로드":"$ docker pull mysql","mysql-docker-컨테이너-생성-및-실행#MySQL Docker 컨테이너 생성 및 실행":"$ docker run --platform linux/amd64\n-p 3306:3306\n--name mysql-contatiner\n-e MYSQL_ROOT_PASSWORD=1234\n-d mysql","mysql-docker-컨테이너-시작중지재시작#MySQL Docker 컨테이너 시작/중지/재시작":"# MySQL Docker 컨테이너 중지\n$ docker stop mysql-container\n\n# MySQL Docker 컨테이너 시작\n$ docker start mysql-container\n\n# MySQL Docker 컨테이너 재시작\n$ docker restart mysql-container","mysql-docker-컨테이너-접속#MySQL Docker 컨테이너 접속":"","docker-컨테이너-내-bash-접속#Docker 컨테이너 내 bash 접속":"$ docker exec -it CONTAINER_NAME bash","mysql-접속#MySQL 접속":"mysql -u root -p\n\n# localhost 에서만 접속 가능한 계정 생성\nmysql> USE mysql;\nmysql> CREATE USER 'YOUR_SYSTEM_USER'@'localhost' IDENTIFIED BY 'YOUR_PASSWD';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'YOUR_SYSTEM_USER'@'localhost';\nmysql> FLUSH PRIVILEGES;\n\n\n# 모든 DB, 테이블에 접속 가능한 계정 생성\nmysql> USE mysql;\nmysql> CREATE USER 'YOUR_SYSTEM_USER'@'%' IDENTIFIED BY 'YOUR_PASSWD';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'YOUR_SYSTEM_USER'@'%';\nmysql> FLUSH PRIVILEGES;\n\nmysql> USE mysql;\nmysql> CREATE USER 'sa'@'%' IDENTIFIED BY 'password';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'sa'@'%';\nmysql> FLUSH PRIVILEGES;\n\n$ docker exec -it mysql-container bash\nroot@dc557b92f573:/# mysql -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 9\nServer version: 8.0.22 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n| test_db            |\n+--------------------+\n5 rows in set (0.00 sec)\nmysql> select host, user from user;\n+-----------+------------------+\n| host      | user             |\n+-----------+------------------+\n| %         | root             |\n| localhost | mysql.infoschema |\n| localhost | mysql.session    |\n| localhost | mysql.sys        |\n| localhost | root             |\n+-----------+------------------+\n5 rows in set (0.00 sec)\n\nmysql> create user 'testuser'@'%' identified by 'testuser123';\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> show grants for testuser@'%';\n+----------------------------------------+\n| Grants for testuser@%                  |\n+----------------------------------------+\n| GRANT USAGE ON *.* TO `testuser`@`%`   |\n+----------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> grant all privileges on test_db.* to testuser@'%';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> show grants for testuser@'%';\n+--------------------------------------------------------+\n| Grants for testuser@%                                  |\n+--------------------------------------------------------+\n| GRANT USAGE ON *.* TO `testuser`@`%`                   |\n| GRANT ALL PRIVILEGES ON `test_db`.* TO `testuser`@`%`  |\n+--------------------------------------------------------+\n2 rows in set (0.01 sec)","docker-compose-파일로-생성하기#Docker Compose 파일로 생성하기":"version: \"3\"\nservices:\ndb:\nimage: mysql:latest\ncontainer_name: mysql-container\nports:\n- \"3306:3306\"\nenvironment:\nMYSQL_DATABASE:\nMYSQL_USER:\nMYSQL_PASSWORD:\nMYSQL_ROOT_PASSWORD:\nTZ=Asia/Seoul:\ncommand: # 명령어 실행\n- --character-set-server=utf8mb4\n- --collation-server=utf8mb4_unicode_ci\nvolumes:\n- ../db/conf.d:/etc/mysql/conf.d\n- ../db/initdb.d:/docker-entrypoint-initdb.d\n- ../db/:/var/lib/mysql # -v 옵션 (다렉토리 마운트 설정)","docker-compose-실행#Docker Compose 실행":"$ docker-compose up -d"}},"/git/git-projects":{"title":"Git Projects 사용하기","data":{"":"","인텔리제이에-연동하기#인텔리제이에 연동하기":"","참고#참고":"인텔리제이 협업 플랫폼 연동"}},"/":{"title":"👋 Hi, there!","data":{"":"📚 Today I Learned 하루하루 공부하고 기록 남기기"}},"/javakotlin/jvm":{"title":"Jvm","data":{"":"","참고#참고":"JVM Internal\nJava - Reflection 쉽고 빠르게 이해하기\nJVM은-무엇이며-자바-코드는-어떻게-실행하는-것인가"}},"/ddd/event-storming":{"title":"이벤트 스토밍","data":{"":"","참고#참고":"마이크로서비스 모델링 ④ : 이벤트 스토밍을 통한 마이크로서비스 도출\nMSA School 이벤트 스토밍"}},"/linux/command":{"title":"Command","data":{"":"","리눅스-명령어#리눅스 명령어":"","tips#Tips":"$> tab\n$> Arrow Up & Down\n$> ! ${찾고자하는 이전 사용 명령어의 시작 알파벳}\n$> !! # 바로 이전 사용한 명령어\n$> Ctrl + A, Ctrl + E\n$> history\n$> man ${명령} # 메뉴얼\n$> vmstat # 서버 상태 보여줌"}},"/linux/linux":{"title":"Linux","data":{"":"","linux-shell#Linux Shell":"Mainpulate Linux Kernel","linux-shell-types#Linux Shell Types":"sh (Bourne shell) : By Unix Shell, Super shell\nbash (Bourne-agin shell) : Super shell in Linux\ncsh (C shell) : C like syntax\ntcsh (Enhanced-C shell)\nksh (korn shell) : Powerful Script Language\nzch (Z shell) : Unix/GNU shell script, Powerful Script Language","linux-file-system-directories#Linux File System Directories":"/bin : 기본 명령어\n/sbin : 관리자용, ifconfig\n/boot : for booting\n/dev : device file, cd-rom\n/etc : config, passwd, rc.d\n/home : user home dir\n/lib : shared library\n/media : ssd\n/opt : application software package\n/proc : process info\n/root : root home dir\n/srv : system data\n/tmp : temporary dir\n/usr : source or programs\n/var : logs, ftp, spool, mail","linux-ports#Linux Ports":"Port Number\tName\tPort Number\tName\t20\tFTP (data)\t110\tPOP3\t21\tFTP (control)\t123\tNTP (Network Time Protocol)\t22\tSSH\t143\tIMAP2/4\t23\tTelnet\t443\tHTTPS\t25\tSMTP\t465\tSMTPS\t43\twhois\t514\tSysLog\t53\tDNS\t993\tIMAPS\t80\tHTTP\t995\tPOP3S"}},"/spring/aop":{"title":"Aop","data":{"":"","참고#참고":"토비의 스프링\nAOP(Aspect Oriented Programming)\n[Spring] 스프링 AOP (Spring AOP) 총정리 : 개념, 프록시 기반 AOP, @AOP"}},"/spring/spring-boot":{"title":"스프링 부트","data":{"":"스프링 부트(Spring Boot)는 기존 스프링 레거시로는 복잡한 xml 설정을 했던것과 달리 빠르고 간편하게 작성할 수 있게 도와주는 여러가지 도구들의 모인 독립실행형 어플리케이션이다.컨테이너리스 웹 애플리케이션 아키텍처 (컨테이너를 신경쓰지 않아도 되는 - serverless랑 비슷한 개념)\n웹컴포넌트는 다이나믹한 데이터를 웹클라이언트에게 제공해준다. 이러한 웹컴포넌트 여러개를 웹컨테이너(서블릿 컨테이너 - ex 톰캣)가 관리한다. 웹컨테이너는 여러 요청을 알맞은 웹컴포넌트에게 맡김","api-테스트#api 테스트":"웹브라우저 개발자 도구\ncurl\nIntellij IDEA Ultimate- http request\nPostman\nXUnit\nHTTPie\n\n\nhttp -v \":8080/hello?name=spring\""}},"/spring/spring-security":{"title":"Spring Security","data":{"":""}}}